import * as JSOG from 'jsog'
import {handleRequestErrors} from './auth'
import { toggleSnackbar } from '../actions/snackbar'
import { API_URL } from '../config.js'

export const REQUEST_VULNERABILITIES = 'REQUEST_VULNERABILITIES'
export const RECEIVE_VULNERABILITIES = 'RECEIVE_VULNERABILITIES'
export const SELECT_PAGE = 'SELECT_VULNERABILITIES_PAGE'
export const TOGGLE_VULNERABILITY_DIALOG = 'TOGGLE_VULNERABILITY_DIALOG';

export const toggleVulnerabilityDialog = (open, vulnerability) =>  {	
  return ({
	type: TOGGLE_VULNERABILITY_DIALOG,
	open: open,
	vulnerability: vulnerability
  })
}

export const selectPage = (newPage) => ({
	type: SELECT_PAGE,
	newPage: newPage
})

export const requestVulnerabilities = () => ({
  type: REQUEST_VULNERABILITIES
})

export const receiveVulnerabilities = (data) => ({
  type: RECEIVE_VULNERABILITIES,
  vulnerabilities: data.content,
  page: {
	  total: data.totalPages,
	  size: data.size,
	  current: data.number + 1
  	}
})

export const fetchVulnerabilities = (page) => (dispatch) => {
  dispatch(requestVulnerabilities())
  return fetch(`${API_URL}/vulnerabilities?size=${page.size}&page=${page.current - 1}`, {credentials: 'include', redirect: 'manual'})
	.then(handleRequestErrors)
    .then(result=>result.json())
    .then(items=> {
    	var data = JSOG.decode(items);
    	dispatch(receiveVulnerabilities(data));
    });
}

const shouldFetchVulnerabilities = (state, page) => {
  const vulnerabilities = state.vulnerabilities

  if (!vulnerabilities) {
    return true
  }

  if (vulnerabilities.isFetching) {
    return false
  }

  return vulnerabilities.page.total == undefined || vulnerabilities.page.current != page.current || vulnerabilities.page.size != page.size 
}

export const fetchVulnerabilitiesIfNeeded = (page) => (dispatch, getState) => {
  if (shouldFetchVulnerabilities(getState(), page)) {
    return dispatch(fetchVulnerabilities(page))
  }
}
